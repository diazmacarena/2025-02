#include <iostream>
using namespace std;


int* getMatrix(int *matrices, int matriz, int filas, int cols) {
    return matrices + matriz * filas * cols;
}

void multiplicarMatrices(int *matrices[3][3]) {
    int *A = (int*)matrices[0];
    int *B = (int*)matrices[1]; 
    int *C = (int*)matrices[2];

    int *pC_row, *pA_row, *pB_col;

    // recorro filas de A
    for (int i = 0; i < 3; ++i) {
        pA_row = A + i * c1;   
        pC_row = C + i * c2;   

        // recorro columnas de B
        for (int j = 0; j < c2; ++j) {
            int sum = 0;
            pB_col = B + j;    
            int *pa = pA_row;
            int *pb = pB_col;

            
            for (int k = 0; k < c1; ++k) {
                sum += (*pa) * (*pb);
                ++pa;       
                pb += c2;   
            }

            // guardo en C
            *(pC_row + j) = sum;
        }
    }
}

int main() {
    int r1 = 2, c1 = 3, c2 = 2;
    
    int total = r1*c1 + c1*c2 + r1*c2;
    int *matrices = new int[total];


    // punteros a cada matriz
    int *A = getMatrix(matrices, 0, r1, c1);
    int *B = getMatrix(matrices, 1, c1, c2);
    int *C = getMatrix(matrices, 2, r1, c2);

    int getA[] = {1,2,3,4,5,6};
    for (int i = 0; i < r1*c1; i++) *(A+i) = getA[i];

    int getB[] = {7,8,9,10,11,12};
    for (int i = 0; i < c1*c2; i++) *(B+i) = getB[i];

    // hago la multiplicaciÃ³n
    multiplicarMatrices(matrices, r1, c1, c2);

    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c2; j++) {
            cout << *(C + i*c2 + j) << " ";
        }
        cout << endl;
    }

    delete[] matrices;
    return 0;
}
